# This log4j configuration file is used to control the logging of  
# messages by the Java LM SDK library. Each log message consists of
# relative time, log level, thread name, logger name, and the message
# in that order. This configuration file defines the following appenders
#  - ConsoleAppender A1 that outputs to System.out
#  - FileAppender A2 that outputs to a text file lmapi.log

# For the general syntax of property based configuration files see the
# documenation of org.apache.log4j.PropertyConfigurator.


# For outputting the log messages to the console, uncomment the next line
# log4j.rootLogger=DEBUG, A1
# For outputting the log messages to a file, uncomment the next line
  log4j.rootLogger=DEBUG, A2
# For outputting the log messages to a file and to the console, uncomment the next line
# log4j.rootLogger=DEBUG, A1, A2


# A1 is set to be a ConsoleAppender which outputs to System.out. 
log4j.appender.A1=org.apache.log4j.ConsoleAppender

# A2 is set to be a FileAppender which outputs to lmapi.log
log4j.appender.A2=org.apache.log4j.FileAppender
log4j.appender.A2.File=lmapi.log

# Truncate 'lmapi.log' if it aleady exists.
log4j.appender.A2.Append=false

# A1 and A2 use the same PatternLayout.
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A2.layout=org.apache.log4j.PatternLayout

# The conversion pattern uses format specifiers. 
# A format specifier has the following syntax -  %[fm][cc]
# where cc is a conversion character modifier and can be one of the following -
# c - Category of the logging event  
# C - Fully qualified class name of the caller issuing the log request
# d - Date of the logging event 
# F - File name where the logging request was issued
# l - location information of the caller which generated the logging even
# L - line number from where the logging request was issued
# m - application supplied message associated with the logging event
# M - method name where the logging request was issued
# n - platform dependent line separator
# p - priority of the logging event like DEBUG, INFO 
# r - number of milliseconds since the start of the application till the log request
# t - name of the thread that generated the logging event
# 
# Format modifiers control such things as field width, padding, left and right 
# justification.For example - 
# %20c - left pads with spaces if the category name is less than 20 characters long
# -20c - right pad with spaces if the category name is less than 20 characters long
# %.30c - truncate from beginning if the category name is longer than 30 characters
# %20.30c - left pad with spaces if the category name is shorter than 20 characters.
#           However if the category name is longer than 30 characters, then truncate
#           from the beginning.
# %-20.30c - right pad with spaces if the category name is shorter than 20 characters.
#           However if the category name is longer than 30 characters, then truncate
#           from the beginning.
# Literal text can also be inserted within the conversion pattern
log4j.appender.A1.layout.ConversionPattern=%-4r %-5p [%t] %100c - %m%n
log4j.appender.A2.layout.ConversionPattern=%-4r %-5p [%t] %100c - %m%n


# The following is the list of the Logger that are initialized by the
# Java LM SDK library. 
# log4j.logger.com.informatica.powercenter.sdk.lm

# log4j.logger.com.informatica.powercenter.sdk.lm.JLMDriver10
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMDriver10.initialize
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMDriver10.deinitialize
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMDriver10.getConnection
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMDriver10.dispatchReply
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMDriver10.ping
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMDriver10.registerCancelCallback


# log4j.logger.com.informatica.powercenter.sdk.lm.JLMConnection10
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMConnection10.close
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMConnection10.abort
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMConnection10.stopServer
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMConnection10.login
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMConnection10.getConnectionState
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMConnection10.ping
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMConnection10.getFolderId
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMConnection10.getWorkflow
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMConnection10.getServerProperties
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMConnection10.getServerDetails
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMConnection10.getLastError

# log4j.logger.com.informatica.powercenter.sdk.lm.JLMException
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMException.handleExceptionOrWarning

# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerDetails10
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerDetails10.setServerStatus
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerDetails10.setStartupTime
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerDetails10.setReferenceTime
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerDetails10.setCurrentTime
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerDetails10.setWorkflows
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerDetails10.setTasks
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerDetails10.setLinks

# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerPropertyInfo10
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerPropertyInfo10.setProductName
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerPropertyInfo10.setServerName
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerPropertyInfo10.setServerVersion
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerPropertyInfo10.setServerDebugMapping
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerPropertyInfo10.setServerMode
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerPropertyInfo10.setStartupTime
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerPropertyInfo10.setCurrentTime
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMServerPropertyInfo10.setRepositoryName

# log4j.logger.com.informatica.powercenter.sdk.lm.JLMWorkflow10
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMWorkflow10.setDetails
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMWorkflow10.schedule
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMWorkflow10.unschedule
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMWorkflow10.start
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMWorkflow10.stop
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMWorkflow10.resume
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMWorkflow10.waitTillComplete
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMWorkflow10.refresh
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMWorkflow10.startWorkflowLogFetch
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMWorkflow10.getTask

# log4j.logger.com.informatica.powercenter.sdk.lm.JLMTask10
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMTask10.setAllFields
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMTask10.getSession
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMTask10.start
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMTask10.stop
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMTask10.resume
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMTask10.waitTillComplete

# log4j.logger.com.informatica.powercenter.sdk.lm.JLMSession10
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMSession10.startSessionLogFetch
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMSession10.getPerformanceData
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMSession10.start
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMSession10.stop
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMSession10.waitTillComplete

# log4j.logger.com.informatica.powercenter.sdk.lm.JLMUtil
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMUtil.getTimeZoneDiff

# Developers can use the appropriate loggers to customize the category of log messages that will be # printed out. Here are a few examples.
# 1. To disable logging for the entire package, use the following entry
# log4j.logger.com.informatica.powercenter.sdk.lm=OFF
# 2. To disable logging for all the set methods in the IJLMDriver10 class except for the 
# getConnection method, use the following entries
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMDriver10=OFF
# log4j.logger.com.informatica.powercenter.sdk.lm.JLMDriver10.getConnection=ALL
# 3. To enable only log requests of level INFO or higher, use the following entry
# log4j.logger.com.informatica.powercenter.sdk.lm=INFO






 